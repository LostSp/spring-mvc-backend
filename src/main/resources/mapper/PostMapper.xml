<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.spring_mvc_backend.mapper.PostMapper">

    <insert id="insertPost" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (title, content, user_id, created_at)
        VALUES (#{title}, #{content}, #{userId}, NOW())
    </insert>

    <select id="findPostById" resultType="com.example.spring_mvc_backend.model.Post">
        SELECT
        p.id,
        p.title,
        p.content,
        p.created_at AS createdAt,
        p.user_id AS userId,
        m.username AS username
        FROM posts p
        JOIN members m ON p.user_id = m.id
        WHERE p.id = #{id}
    </select>
    <!--<select id="findPosts" resultType="com.example.spring_mvc_backend.model.Post">
        SELECT p.id, p.title, p.created_at, m.username
        FROM posts p
        JOIN members m ON p.user_id = m.id
        ORDER BY p.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>-->

    <select id="countPosts" resultType="int">
        SELECT COUNT(*) FROM posts
    </select>
    <select id="findPosts" resultType="com.example.spring_mvc_backend.model.Post">
        SELECT
        p.id,
        p.title,
        p.content,
        p.created_at AS createdAt,
        p.user_id AS userId,
        m.username
        FROM posts p
        JOIN members m ON p.user_id = m.id
        ORDER BY p.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>
    <select id="getPostById" parameterType="long" resultType="com.example.spring_mvc_backend.dto.PostResponse">
        SELECT
        p.id,
        p.title,
        p.content,
        p.created_at AS createdAt,
        p.user_id AS userId,
        m.username
        FROM posts p
        <!--JOIN members m ON p.user_id = m.email-->
        JOIN members m ON p.user_id = m.id
        WHERE p.id = #{postId}
    </select>

</mapper>


